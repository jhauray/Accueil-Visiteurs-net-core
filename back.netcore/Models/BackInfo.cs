/*
 * Accueil visiteurs
 *
 * Voici la définition de l'API d'échange en une application SPA d'accueil, et son backend.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeremy.hauray@mythalesgroup.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace back.net_core.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BackInfo : IEquatable<BackInfo>
    { 
        /// <summary>
        /// Gets or Sets Langage
        /// </summary>
        [DataMember(Name="langage")]
        public string Langage { get; set; }

        /// <summary>
        /// Gets or Sets LangageVersion
        /// </summary>
        [DataMember(Name="langageVersion")]
        public string LangageVersion { get; set; }

        /// <summary>
        /// Gets or Sets Clouder
        /// </summary>
        [DataMember(Name="clouder")]
        public string Clouder { get; set; }

        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name="sourceUrl")]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets PlaybookUrl
        /// </summary>
        [DataMember(Name="playbookUrl")]
        public string PlaybookUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BackInfo {\n");
            sb.Append("  Langage: ").Append(Langage).Append("\n");
            sb.Append("  LangageVersion: ").Append(LangageVersion).Append("\n");
            sb.Append("  Clouder: ").Append(Clouder).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  PlaybookUrl: ").Append(PlaybookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BackInfo)obj);
        }

        /// <summary>
        /// Returns true if BackInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of BackInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BackInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Langage == other.Langage ||
                    Langage != null &&
                    Langage.Equals(other.Langage)
                ) && 
                (
                    LangageVersion == other.LangageVersion ||
                    LangageVersion != null &&
                    LangageVersion.Equals(other.LangageVersion)
                ) && 
                (
                    Clouder == other.Clouder ||
                    Clouder != null &&
                    Clouder.Equals(other.Clouder)
                ) && 
                (
                    SourceUrl == other.SourceUrl ||
                    SourceUrl != null &&
                    SourceUrl.Equals(other.SourceUrl)
                ) && 
                (
                    PlaybookUrl == other.PlaybookUrl ||
                    PlaybookUrl != null &&
                    PlaybookUrl.Equals(other.PlaybookUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Langage != null)
                    hashCode = hashCode * 59 + Langage.GetHashCode();
                    if (LangageVersion != null)
                    hashCode = hashCode * 59 + LangageVersion.GetHashCode();
                    if (Clouder != null)
                    hashCode = hashCode * 59 + Clouder.GetHashCode();
                    if (SourceUrl != null)
                    hashCode = hashCode * 59 + SourceUrl.GetHashCode();
                    if (PlaybookUrl != null)
                    hashCode = hashCode * 59 + PlaybookUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BackInfo left, BackInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BackInfo left, BackInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
